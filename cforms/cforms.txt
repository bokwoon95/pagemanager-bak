type SuperadminLoginData struct {
    Password   string
    RememberMe bool
}

A form is a function that takes in a *cforms.Form.

func (d *SuperadminLoginData) Form(form *cforms.Form) {
    h, attr, txt = cforms.H, cforms.Attr, cforms.Txt
    password := form.Text("pm-superadmin-password", d.Password, "#pm-superadmin-password.pm-superadmin-password", nil)
    rememberMe := form.Checkbox("remember-me", false, "#remember-me.remember-me", nil)
    errs := h("div", nil)
    for _, err := range password.Errs {
        errs.Append("div", nil, txt{err.Error()})
    }
    form.Set("#loginform.loginform.bg-white", attr{"method": "POST", "action": ""})
    form.Append("div", nil, errs)
    form.Append("div.mv2.pt2", nil, h("label", attr{"for":"pm-superadmin-password"}, txt{"Password"}))
    form.Append("div", nil, password)
    form.Append("div.mv2.pt2", nil, rememberMe, h("label.ml1.pointer", attr{"for":"remember-me"}))
    form.Append("div.mv2.pt2", nil, h("button", attr{"type":"submit"}, txt{"Log In"}))
    form.Unmarshal(func() {
        d.Password = password.String(xforms.NotEmpty, xforms.ProperPassword)
        d.RememberMe = rememberMe.Bool()
        if len(form.InputErrors()) > 0 {
            return
        }
        if d.Password != d.PasswordConfirmation {
            form.Err(fmt.Errorf("password not match"))
        }
    })
}

func (d *SuperadminLoginData) Form(form *fm.Form) {
    password := form.Text("pm-superadmin-password", d.Password, "#pm-superadmin-password.pm-superadmin-password", nil)
    rememberMe := form.Checkbox("remember-me", false, "#remember-me.remember-me", nil)
    errs := fm.H("div", nil)
    for _, err := range password.Errs {
        errs.Append("div", nil, fm.Txt{err.Error()})
    }
    form.Set("#loginform.loginform.bg-white", fm.Attr{"method": "POST", "action": ""})
    form.Append("div", nil, errs)
    form.Append("div.mv2.pt2", nil, fm.H("label", fm.Attr{"for":"pm-superadmin-password"}, fm.Txt{i18n("Login.Password")}))
    form.Append("div", nil, password)
    form.Append("div.mv2.pt2", nil, rememberMe, fm.H("label.ml1.pointer", fm.Attr{"for":"remember-me"}))
    form.Append("div.mv2.pt2", nil, fm.H("button", fm.Attr{"type":"submit"}, fm.Txt{"Log In"}))
    form.Unmarshal(func() {
        d.Password = password.String(xforms.NotEmpty, xforms.ProperPassword)
        d.RememberMe = rememberMe.Bool()
        if len(form.InputErrors()) > 0 {
            return
        }
        if d.Password != d.PasswordConfirmation {
            form.Err(fmt.Errorf("password not match"))
        }
    })
}

xforms
A form validation and rendering library for Go

fm.H()
fm.Attr{}
fm.Txt{}

GET:
    data.Form, err = xforms.MarshalForm(r, d.Form)
    if err != nil {
    }
    t.Execute(w, data)
POST:
    err = xforms.UnmarshalForm(r, d.Form)
    if err != nil {
        xforms.Redirect(w, r, r.URL.Path, err)
        return
    }
